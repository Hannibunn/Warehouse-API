// <auto-generated />
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Sets_API.Data;

#nullable disable

namespace Sets_API.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250807015511_SETS")]
    partial class SETS
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Sets_API.Models.Box", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("QRcode")
                        .HasColumnType("text");

                    b.Property<int?>("StorageID")
                        .HasColumnType("integer");

                    b.HasKey("ID");

                    b.HasIndex("StorageID");

                    b.ToTable("Boxes");
                });

            modelBuilder.Entity("Sets_API.Models.Set", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("availability")
                        .HasColumnType("text");

                    b.Property<int?>("boxID")
                        .HasColumnType("integer");

                    b.Property<string>("category")
                        .HasColumnType("text");

                    b.Property<int?>("instructionsCount")
                        .HasColumnType("integer");

                    b.Property<int?>("minifigs")
                        .HasColumnType("integer");

                    b.Property<string>("name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("number")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("numberVariant")
                        .HasColumnType("integer");

                    b.Property<string>("packagingType")
                        .HasColumnType("text");

                    b.Property<int?>("pieces")
                        .HasColumnType("integer");

                    b.Property<bool?>("released")
                        .HasColumnType("boolean");

                    b.Property<int?>("setID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int?>("setID"));

                    b.Property<string>("subTheme")
                        .HasColumnType("text");

                    b.Property<string>("theme")
                        .HasColumnType("text");

                    b.Property<string>("themeGroup")
                        .HasColumnType("text");

                    b.Property<int>("year")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("boxID");

                    b.HasIndex("name");

                    b.HasIndex("number");

                    b.ToTable("Sets");
                });

            modelBuilder.Entity("Sets_API.Models.Storage", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ID"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("ImageSource")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("ID");

                    b.ToTable("Storage");
                });

            modelBuilder.Entity("Sets_API.Models.Box", b =>
                {
                    b.HasOne("Sets_API.Models.Storage", "Storage")
                        .WithMany("Boxes")
                        .HasForeignKey("StorageID");

                    b.Navigation("Storage");
                });

            modelBuilder.Entity("Sets_API.Models.Set", b =>
                {
                    b.HasOne("Sets_API.Models.Box", "box")
                        .WithMany("Sets")
                        .HasForeignKey("boxID");

                    b.OwnsOne("Sets_API.Models.Barcode", "Barcode", b1 =>
                        {
                            b1.Property<int>("ID")
                                .HasColumnType("integer");

                            b1.Property<string>("EAN")
                                .HasColumnType("text");

                            b1.Property<string>("UPC")
                                .HasColumnType("text");

                            b1.HasKey("ID");

                            b1.ToTable("Sets");

                            b1.WithOwner()
                                .HasForeignKey("ID");
                        });

                    b.OwnsOne("Sets_API.Models.Dimensions", "Dimensions", b1 =>
                        {
                            b1.Property<int>("ID")
                                .HasColumnType("integer");

                            b1.Property<double?>("Depth")
                                .HasColumnType("double precision");

                            b1.Property<double?>("Height")
                                .HasColumnType("double precision");

                            b1.Property<double?>("Weight")
                                .HasColumnType("double precision");

                            b1.Property<double?>("Width")
                                .HasColumnType("double precision");

                            b1.HasKey("ID");

                            b1.ToTable("Sets");

                            b1.WithOwner()
                                .HasForeignKey("ID");
                        });

                    b.OwnsOne("Sets_API.Models.ExtendedData", "ExtendedData", b1 =>
                        {
                            b1.Property<int>("ID")
                                .HasColumnType("integer");

                            b1.Property<List<string>>("BrickTags")
                                .IsRequired()
                                .HasColumnType("text[]");

                            b1.HasKey("ID");

                            b1.ToTable("Sets");

                            b1.WithOwner()
                                .HasForeignKey("ID");
                        });

                    b.OwnsOne("Sets_API.Models.ImagePreview", "Image", b1 =>
                        {
                            b1.Property<int>("ID")
                                .HasColumnType("integer");

                            b1.Property<string>("ImageURL")
                                .HasColumnType("text");

                            b1.Property<string>("ThumbnailURL")
                                .HasColumnType("text");

                            b1.HasKey("ID");

                            b1.ToTable("Sets");

                            b1.WithOwner()
                                .HasForeignKey("ID");
                        });

                    b.OwnsOne("Sets_API.Models.LegoComInfo", "LEGOCom", b1 =>
                        {
                            b1.Property<int>("Id")
                                .HasColumnType("integer");

                            b1.HasKey("Id");

                            b1.ToTable("Sets");

                            b1.WithOwner()
                                .HasForeignKey("Id");

                            b1.OwnsOne("Sets_API.Models.RegionInfo", "CA", b2 =>
                                {
                                    b2.Property<int>("Id")
                                        .HasColumnType("integer");

                                    b2.Property<DateTime?>("DateFirstAvailable")
                                        .HasColumnType("timestamp with time zone");

                                    b2.Property<DateTime?>("DateLastAvailable")
                                        .HasColumnType("timestamp with time zone");

                                    b2.Property<double?>("RetailPrice")
                                        .HasColumnType("double precision");

                                    b2.HasKey("Id");

                                    b2.ToTable("Sets");

                                    b2.WithOwner()
                                        .HasForeignKey("Id");
                                });

                            b1.OwnsOne("Sets_API.Models.RegionInfo", "DE", b2 =>
                                {
                                    b2.Property<int>("Id")
                                        .HasColumnType("integer");

                                    b2.Property<DateTime?>("DateFirstAvailable")
                                        .HasColumnType("timestamp with time zone");

                                    b2.Property<DateTime?>("DateLastAvailable")
                                        .HasColumnType("timestamp with time zone");

                                    b2.Property<double?>("RetailPrice")
                                        .HasColumnType("double precision");

                                    b2.HasKey("Id");

                                    b2.ToTable("Sets");

                                    b2.WithOwner()
                                        .HasForeignKey("Id");
                                });

                            b1.OwnsOne("Sets_API.Models.RegionInfo", "UK", b2 =>
                                {
                                    b2.Property<int>("Id")
                                        .HasColumnType("integer");

                                    b2.Property<DateTime?>("DateFirstAvailable")
                                        .HasColumnType("timestamp with time zone");

                                    b2.Property<DateTime?>("DateLastAvailable")
                                        .HasColumnType("timestamp with time zone");

                                    b2.Property<double?>("RetailPrice")
                                        .HasColumnType("double precision");

                                    b2.HasKey("Id");

                                    b2.ToTable("Sets");

                                    b2.WithOwner()
                                        .HasForeignKey("Id");
                                });

                            b1.OwnsOne("Sets_API.Models.RegionInfo", "US", b2 =>
                                {
                                    b2.Property<int>("Id")
                                        .HasColumnType("integer");

                                    b2.Property<DateTime?>("DateFirstAvailable")
                                        .HasColumnType("timestamp with time zone");

                                    b2.Property<DateTime?>("DateLastAvailable")
                                        .HasColumnType("timestamp with time zone");

                                    b2.Property<double?>("RetailPrice")
                                        .HasColumnType("double precision");

                                    b2.HasKey("Id");

                                    b2.ToTable("Sets");

                                    b2.WithOwner()
                                        .HasForeignKey("Id");
                                });

                            b1.Navigation("CA");

                            b1.Navigation("DE");

                            b1.Navigation("UK");

                            b1.Navigation("US");
                        });

                    b.OwnsOne("Sets_API.Models.AgeRangeInfo", "AgeRange", b1 =>
                        {
                            b1.Property<int>("SetId")
                                .HasColumnType("integer");

                            b1.Property<int?>("Id")
                                .HasColumnType("integer");

                            b1.Property<int?>("Max")
                                .HasColumnType("integer");

                            b1.Property<int?>("Min")
                                .HasColumnType("integer");

                            b1.HasKey("SetId");

                            b1.ToTable("Sets");

                            b1.WithOwner()
                                .HasForeignKey("SetId");
                        });

                    b.Navigation("AgeRange");

                    b.Navigation("Barcode");

                    b.Navigation("Dimensions");

                    b.Navigation("ExtendedData");

                    b.Navigation("Image");

                    b.Navigation("LEGOCom")
                        .IsRequired();

                    b.Navigation("box");
                });

            modelBuilder.Entity("Sets_API.Models.Box", b =>
                {
                    b.Navigation("Sets");
                });

            modelBuilder.Entity("Sets_API.Models.Storage", b =>
                {
                    b.Navigation("Boxes");
                });
#pragma warning restore 612, 618
        }
    }
}
