// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Sets_API.Data;

#nullable disable

namespace Sets_API.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250703012918_Sets")]
    partial class Sets
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Sets_API.Models.Box", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Qrcode")
                        .HasColumnType("text")
                        .HasColumnName("QRcode");

                    b.HasKey("Id")
                        .HasName("Box_pkey");

                    b.ToTable("Box", (string)null);
                });

            modelBuilder.Entity("Sets_API.Models.Set", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int?>("AgeRangeId")
                        .HasColumnType("integer")
                        .HasColumnName("AgeRange_Id");

                    b.Property<int?>("AgeRangeMax")
                        .HasColumnType("integer")
                        .HasColumnName("AgeRange_Max");

                    b.Property<int?>("AgeRangeMin")
                        .HasColumnType("integer")
                        .HasColumnName("AgeRange_Min");

                    b.Property<string>("Availability")
                        .HasColumnType("text");

                    b.Property<string>("BarcodeEan")
                        .HasColumnType("text")
                        .HasColumnName("Barcode_EAN");

                    b.Property<string>("BarcodeUpc")
                        .HasColumnType("text")
                        .HasColumnName("Barcode_UPC");

                    b.Property<int?>("BoxId")
                        .HasColumnType("integer")
                        .HasColumnName("BoxID");

                    b.Property<string>("Category")
                        .HasColumnType("text");

                    b.Property<float?>("DimensionsDepth")
                        .HasColumnType("real")
                        .HasColumnName("Dimensions_Depth");

                    b.Property<float?>("DimensionsHeight")
                        .HasColumnType("real")
                        .HasColumnName("Dimensions_Height");

                    b.Property<float?>("DimensionsWeight")
                        .HasColumnType("real")
                        .HasColumnName("Dimensions_Weight");

                    b.Property<float?>("DimensionsWidth")
                        .HasColumnType("real")
                        .HasColumnName("Dimensions_Width");

                    b.Property<string>("ExtendedDataBrickTags")
                        .HasColumnType("text")
                        .HasColumnName("ExtendedData_BrickTags");

                    b.Property<int?>("ImageId")
                        .HasColumnType("integer")
                        .HasColumnName("Image_Id");

                    b.Property<string>("ImageImageUrl")
                        .HasColumnType("text")
                        .HasColumnName("Image_ImageURL");

                    b.Property<string>("ImageThumbnailUrl")
                        .HasColumnType("text")
                        .HasColumnName("Image_ThumbnailURL");

                    b.Property<int?>("InstructionsCount")
                        .HasColumnType("integer");

                    b.Property<string>("LegocomCaDateFirstAvailable")
                        .HasColumnType("text")
                        .HasColumnName("LEGOCom_CA_DateFirstAvailable");

                    b.Property<string>("LegocomCaDateLastAvailable")
                        .HasColumnType("text")
                        .HasColumnName("LEGOCom_CA_DateLastAvailable");

                    b.Property<string>("LegocomCaRetailPrice")
                        .HasColumnType("text")
                        .HasColumnName("LEGOCom_CA_RetailPrice");

                    b.Property<string>("LegocomDeDateFirstAvailable")
                        .HasColumnType("text")
                        .HasColumnName("LEGOCom_DE_DateFirstAvailable");

                    b.Property<string>("LegocomDeDateLastAvailable")
                        .HasColumnType("text")
                        .HasColumnName("LEGOCom_DE_DateLastAvailable");

                    b.Property<string>("LegocomDeRetailPrice")
                        .HasColumnType("text")
                        .HasColumnName("LEGOCom_DE_RetailPrice");

                    b.Property<int?>("LegocomId")
                        .HasColumnType("integer")
                        .HasColumnName("LEGOCom_Id");

                    b.Property<string>("LegocomUkDateFirstAvailable")
                        .HasColumnType("text")
                        .HasColumnName("LEGOCom_UK_DateFirstAvailable");

                    b.Property<string>("LegocomUkDateLastAvailable")
                        .HasColumnType("text")
                        .HasColumnName("LEGOCom_UK_DateLastAvailable");

                    b.Property<string>("LegocomUkRetailPrice")
                        .HasColumnType("text")
                        .HasColumnName("LEGOCom_UK_RetailPrice");

                    b.Property<string>("LegocomUsDateFirstAvailable")
                        .HasColumnType("text")
                        .HasColumnName("LEGOCom_US_DateFirstAvailable");

                    b.Property<string>("LegocomUsDateLastAvailable")
                        .HasColumnType("text")
                        .HasColumnName("LEGOCom_US_DateLastAvailable");

                    b.Property<string>("LegocomUsRetailPrice")
                        .HasColumnType("text")
                        .HasColumnName("LEGOCom_US_RetailPrice");

                    b.Property<int?>("Minifigs")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("NumberVariant")
                        .HasColumnType("integer");

                    b.Property<string>("PackagingType")
                        .HasColumnType("text");

                    b.Property<int?>("Pieces")
                        .HasColumnType("integer");

                    b.Property<int?>("Released")
                        .HasColumnType("integer");

                    b.Property<string>("Subtheme")
                        .HasColumnType("text");

                    b.Property<string>("Theme")
                        .HasColumnType("text");

                    b.Property<string>("ThemeGroup")
                        .HasColumnType("text");

                    b.Property<int>("Year")
                        .HasColumnType("integer");

                    b.HasKey("Id")
                        .HasName("Sets_pkey");

                    b.HasIndex(new[] { "BoxId" }, "IX_Sets_BoxID");

                    b.ToTable("Sets");
                });

            modelBuilder.Entity("Sets_API.Models.Set", b =>
                {
                    b.HasOne("Sets_API.Models.Box", "Box")
                        .WithMany("Sets")
                        .HasForeignKey("BoxId");

                    b.Navigation("Box");
                });

            modelBuilder.Entity("Sets_API.Models.Box", b =>
                {
                    b.Navigation("Sets");
                });
#pragma warning restore 612, 618
        }
    }
}
